/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as MarketplaceRouteImport } from './routes/marketplace'
import { Route as EditorDemoRouteImport } from './routes/editor-demo'
import { Route as DiscoverRouteImport } from './routes/discover'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as CollaborationsRouteImport } from './routes/collaborations'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectProjectIdRouteImport } from './routes/project.$projectId'

const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketplaceRoute = MarketplaceRouteImport.update({
  id: '/marketplace',
  path: '/marketplace',
  getParentRoute: () => rootRouteImport,
} as any)
const EditorDemoRoute = EditorDemoRouteImport.update({
  id: '/editor-demo',
  path: '/editor-demo',
  getParentRoute: () => rootRouteImport,
} as any)
const DiscoverRoute = DiscoverRouteImport.update({
  id: '/discover',
  path: '/discover',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const CollaborationsRoute = CollaborationsRouteImport.update({
  id: '/collaborations',
  path: '/collaborations',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectProjectIdRoute = ProjectProjectIdRouteImport.update({
  id: '/project/$projectId',
  path: '/project/$projectId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/collaborations': typeof CollaborationsRoute
  '/dashboard': typeof DashboardRoute
  '/discover': typeof DiscoverRoute
  '/editor-demo': typeof EditorDemoRoute
  '/marketplace': typeof MarketplaceRoute
  '/profile': typeof ProfileRoute
  '/projects': typeof ProjectsRoute
  '/project/$projectId': typeof ProjectProjectIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/collaborations': typeof CollaborationsRoute
  '/dashboard': typeof DashboardRoute
  '/discover': typeof DiscoverRoute
  '/editor-demo': typeof EditorDemoRoute
  '/marketplace': typeof MarketplaceRoute
  '/profile': typeof ProfileRoute
  '/projects': typeof ProjectsRoute
  '/project/$projectId': typeof ProjectProjectIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/collaborations': typeof CollaborationsRoute
  '/dashboard': typeof DashboardRoute
  '/discover': typeof DiscoverRoute
  '/editor-demo': typeof EditorDemoRoute
  '/marketplace': typeof MarketplaceRoute
  '/profile': typeof ProfileRoute
  '/projects': typeof ProjectsRoute
  '/project/$projectId': typeof ProjectProjectIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/collaborations'
    | '/dashboard'
    | '/discover'
    | '/editor-demo'
    | '/marketplace'
    | '/profile'
    | '/projects'
    | '/project/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/collaborations'
    | '/dashboard'
    | '/discover'
    | '/editor-demo'
    | '/marketplace'
    | '/profile'
    | '/projects'
    | '/project/$projectId'
  id:
    | '__root__'
    | '/'
    | '/auth'
    | '/collaborations'
    | '/dashboard'
    | '/discover'
    | '/editor-demo'
    | '/marketplace'
    | '/profile'
    | '/projects'
    | '/project/$projectId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  CollaborationsRoute: typeof CollaborationsRoute
  DashboardRoute: typeof DashboardRoute
  DiscoverRoute: typeof DiscoverRoute
  EditorDemoRoute: typeof EditorDemoRoute
  MarketplaceRoute: typeof MarketplaceRoute
  ProfileRoute: typeof ProfileRoute
  ProjectsRoute: typeof ProjectsRoute
  ProjectProjectIdRoute: typeof ProjectProjectIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/marketplace': {
      id: '/marketplace'
      path: '/marketplace'
      fullPath: '/marketplace'
      preLoaderRoute: typeof MarketplaceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/editor-demo': {
      id: '/editor-demo'
      path: '/editor-demo'
      fullPath: '/editor-demo'
      preLoaderRoute: typeof EditorDemoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/discover': {
      id: '/discover'
      path: '/discover'
      fullPath: '/discover'
      preLoaderRoute: typeof DiscoverRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collaborations': {
      id: '/collaborations'
      path: '/collaborations'
      fullPath: '/collaborations'
      preLoaderRoute: typeof CollaborationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/project/$projectId': {
      id: '/project/$projectId'
      path: '/project/$projectId'
      fullPath: '/project/$projectId'
      preLoaderRoute: typeof ProjectProjectIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  CollaborationsRoute: CollaborationsRoute,
  DashboardRoute: DashboardRoute,
  DiscoverRoute: DiscoverRoute,
  EditorDemoRoute: EditorDemoRoute,
  MarketplaceRoute: MarketplaceRoute,
  ProfileRoute: ProfileRoute,
  ProjectsRoute: ProjectsRoute,
  ProjectProjectIdRoute: ProjectProjectIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
